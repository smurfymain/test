local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local player = Players.LocalPlayer

local cachedGC = nil
local lastGCUpdate = 0
local GC_CACHE_TIME = 3

local function getCachedGC()
    local currentTime = tick()
    if not cachedGC or (currentTime - lastGCUpdate) > GC_CACHE_TIME then
        cachedGC = getgc(true)
        lastGCUpdate = currentTime
    end
    return cachedGC
end

if not is_synapse_function then
    function is_synapse_function(_)
        return false
    end
end

local blockedFunctions = {"cvSCVfv", "jdvs_dvcddv"}
local function blockFunctionsByName(targetNames)
    local gcList = getCachedGC()
    local blockedCount = 0
    
    for _, obj in ipairs(gcList) do
        if type(obj) == "function" and not is_synapse_function(obj) then
            local success, info = pcall(debug.getinfo, obj)
            if success and info.name then
                for _, targetName in ipairs(targetNames) do
                    if info.name == targetName then
                        local success2 = pcall(hookfunction, obj, function()
                            return nil
                        end)
                        if success2 then
                            blockedCount = blockedCount + 1
                        end
                        break
                    end
                end
            end
        end
    end
    

end

blockFunctionsByName(blockedFunctions)

local services = {
    game:GetService("VoiceChatService"),
    game:GetService("BrowserService"),
    game:GetService("AssetService")
}

local suspiciousPattern = "[^%w_]"

local function findEncodeModule()
    
    for _, service in ipairs(services) do

        local descendants = service:GetDescendants()
        
        for _, obj in ipairs(descendants) do
            if obj:IsA("ModuleScript") then

                
                if obj.Name:match(suspiciousPattern) then
                    obj.Name = "EncodeModule"
                    return obj
                end
                
                if obj.Name:lower():find("encode") or obj.Name:lower():find("crypt") or obj.Name:lower():find("hash") then
                    return obj
                end
            end
        end
    end
    

    

    for _, obj in ipairs(game:GetDescendants()) do
        if obj:IsA("ModuleScript") and obj.Parent then
            local name = obj.Name
            if name:match(suspiciousPattern) and #name > 5 then
                local success, module = pcall(require, obj)
                if success and module then
                    if type(module) == "table" and type(module.encode) == "function" then
                        return obj
                    elseif type(module) == "function" then
                        return obj
                    end
                end
            end
        end
    end
    

    return nil
end

local function cleanupServices()
    local destroyedCount = 0
    local targetService = nil
    
    for _, service in ipairs(services) do
        local hasModuleScript = false
        local descendants = service:GetDescendants()
        
        for _, obj in ipairs(descendants) do
            if obj:IsA("Script") and obj.Name:match(suspiciousPattern) and obj:IsDescendantOf(game) then
                local success = pcall(function()
                    obj:Destroy()
                end)
                if success then
                    destroyedCount = destroyedCount + 1
                end
            elseif obj:IsA("ModuleScript") then
                hasModuleScript = true
            end
        end
        
        if not hasModuleScript and not targetService then
            targetService = service
        end
    end
    

    
    local encodeModule = findEncodeModule()
    
    return encodeModule, targetService
end

local encodeModule, targetService = cleanupServices()

if targetService then
    local nilInstances = getnilinstances()
    local movedCount = 0
    
    for _, obj in ipairs(nilInstances) do
        if typeof(obj) == "Instance" and obj.ClassName == "ModuleScript" then
            local success = pcall(function()
                obj.Parent = targetService
            end)
            if success then
                movedCount = movedCount + 1
            end
        end
    end
    

end

local eventsFolder = ReplicatedStorage:WaitForChild("Events")
local targetRemote = nil

local function isTargetRemote(name)
    if name:match("^\n%d+\nY%..*R.*") then
        local sections = {}
        for section in name:gmatch("\n%d+\nY%.[^%z]*") do
            table.insert(sections, section)
        end
        return #sections >= 2
    end
    return false
end

local events = eventsFolder:GetChildren()
for _, obj in ipairs(events) do
    if obj:IsA("RemoteEvent") then
        if isTargetRemote(obj.Name) then
            targetRemote = obj
            break
        elseif obj.Name:match(suspiciousPattern) and #obj.Name > 10 then
            targetRemote = obj
            break
        end
    end
end



if encodeModule and targetRemote then
    local success, Encode = pcall(require, encodeModule)
    
    if success and Encode then
        
        local encodeFunction = nil
        
        if type(Encode) == "table" and type(Encode.encode) == "function" then
            encodeFunction = Encode.encode
        elseif type(Encode) == "function" then
            encodeFunction = Encode
        else
            encodeFunction = nil
        end
        
        if encodeFunction then
            local CONSTANTS = {
                PREFIX = "ksssss",
                MULTIPLIER = 69,
                DIVISOR_1 = 2.8232,
                DIVISOR_2 = 43673023,
                SEPARATOR = "-"
            }
            
            local firstHandshakeSent = false
            
            local function emulateHandshake()
                local serverTime = workspace:GetServerTimeNow()
                local sinTime = math.sin(serverTime)
                local part1Data = CONSTANTS.PREFIX .. CONSTANTS.SEPARATOR .. tostring(sinTime * CONSTANTS.MULTIPLIER / CONSTANTS.DIVISOR_1)
                local part2Data = tostring(sinTime / CONSTANTS.DIVISOR_2)
                

                
                local part1, part2 = nil, nil
                
                local part1Success, part1Result = pcall(encodeFunction, part1Data)
                if part1Success then
                    part1 = part1Result
                else
                    if type(Encode) == "table" then
                        part1Success, part1Result = pcall(Encode.encode, Encode, part1Data)
                        if part1Success then
                            part1 = part1Result
                        end
                    end
                end
                
                local part2Success, part2Result = pcall(encodeFunction, part2Data)
                if part2Success then
                    part2 = part2Result
                else
                    if type(Encode) == "table" then
                        part2Success, part2Result = pcall(Encode.encode, Encode, part2Data)
                        if part2Success then
                            part2 = part2Result
                        end
                    end
                end
                
                if part1 and part2 then
                    local handshakeSuccess = pcall(function()
                        targetRemote:FireServer(part1, part2)
                    end)
                    
                    if handshakeSuccess and not firstHandshakeSent then
                        print("bypass loaded")
                        firstHandshakeSent = true
                    end
                end
            end

            local elapsed = 0
            RunService.Heartbeat:Connect(function(dt)
                elapsed = elapsed + dt
                if elapsed >= 10 then
                    elapsed = 0
                    emulateHandshake()
                end
            end)
            
            task.spawn(function()
                task.wait(2)
                emulateHandshake()
            end)
        end
    end
end
